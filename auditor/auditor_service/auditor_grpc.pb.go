// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: auditor.proto

package auditor_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuditorServiceClient is the client API for AuditorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditorServiceClient interface {
	Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error)
}

type auditorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditorServiceClient(cc grpc.ClientConnInterface) AuditorServiceClient {
	return &auditorServiceClient{cc}
}

func (c *auditorServiceClient) Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error) {
	out := new(AuditResponse)
	err := c.cc.Invoke(ctx, "/auditor.AuditorService/Audit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditorServiceServer is the server API for AuditorService service.
// All implementations must embed UnimplementedAuditorServiceServer
// for forward compatibility
type AuditorServiceServer interface {
	Audit(context.Context, *AuditRequest) (*AuditResponse, error)
	mustEmbedUnimplementedAuditorServiceServer()
}

// UnimplementedAuditorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuditorServiceServer struct {
}

func (UnimplementedAuditorServiceServer) Audit(context.Context, *AuditRequest) (*AuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Audit not implemented")
}
func (UnimplementedAuditorServiceServer) mustEmbedUnimplementedAuditorServiceServer() {}

// UnsafeAuditorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditorServiceServer will
// result in compilation errors.
type UnsafeAuditorServiceServer interface {
	mustEmbedUnimplementedAuditorServiceServer()
}

func RegisterAuditorServiceServer(s grpc.ServiceRegistrar, srv AuditorServiceServer) {
	s.RegisterService(&AuditorService_ServiceDesc, srv)
}

func _AuditorService_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditorServiceServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auditor.AuditorService/Audit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditorServiceServer).Audit(ctx, req.(*AuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditorService_ServiceDesc is the grpc.ServiceDesc for AuditorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auditor.AuditorService",
	HandlerType: (*AuditorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Audit",
			Handler:    _AuditorService_Audit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auditor.proto",
}
