// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: ai_assistant.proto

package ai_assistant_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AiAssistantClient is the client API for AiAssistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiAssistantClient interface {
	Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
}

type aiAssistantClient struct {
	cc grpc.ClientConnInterface
}

func NewAiAssistantClient(cc grpc.ClientConnInterface) AiAssistantClient {
	return &aiAssistantClient{cc}
}

func (c *aiAssistantClient) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/ai_assistant.AiAssistant/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiAssistantServer is the server API for AiAssistant service.
// All implementations must embed UnimplementedAiAssistantServer
// for forward compatibility
type AiAssistantServer interface {
	Comment(context.Context, *CommentRequest) (*CommentResponse, error)
	mustEmbedUnimplementedAiAssistantServer()
}

// UnimplementedAiAssistantServer must be embedded to have forward compatible implementations.
type UnimplementedAiAssistantServer struct {
}

func (UnimplementedAiAssistantServer) Comment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedAiAssistantServer) mustEmbedUnimplementedAiAssistantServer() {}

// UnsafeAiAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiAssistantServer will
// result in compilation errors.
type UnsafeAiAssistantServer interface {
	mustEmbedUnimplementedAiAssistantServer()
}

func RegisterAiAssistantServer(s grpc.ServiceRegistrar, srv AiAssistantServer) {
	s.RegisterService(&AiAssistant_ServiceDesc, srv)
}

func _AiAssistant_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiAssistantServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_assistant.AiAssistant/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiAssistantServer).Comment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiAssistant_ServiceDesc is the grpc.ServiceDesc for AiAssistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiAssistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_assistant.AiAssistant",
	HandlerType: (*AiAssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Comment",
			Handler:    _AiAssistant_Comment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_assistant.proto",
}
